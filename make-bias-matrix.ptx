//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21554848
// Cuda compilation tools, release 8.0, V8.0.61
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_20
.address_size 64

	// .globl	_Z10kernel_rowPfS_ii
.global .align 8 .b8 _ZTVN10__cxxabiv117__class_type_infoE[8];
.global .align 8 .b8 _ZTVN10__cxxabiv120__si_class_type_infoE[8];
.global .align 8 .b8 _ZTVN10__cxxabiv121__vmi_class_type_infoE[8];
.global .align 8 .b8 _ZTVSt9exception[40];
.global .align 8 .b8 _ZTVSt8bad_cast[40];
.global .align 8 .b8 _ZTVN5boost9exceptionE[32];
.global .align 8 .b8 _ZTVN5boost16exception_detail10clone_baseE[48];
.global .align 8 .b8 _ZTVN5boost3any11placeholderE[48];
.global .align 8 .b8 _ZTVN5boost12bad_any_castE[40];
.global .align 8 .b8 _ZTVN5boost16bad_lexical_castE[40];
.global .align 8 .b8 _ZTVN5boost15program_options14value_semanticE[96];
.global .align 8 .b8 _ZTVN5boost15program_options29value_semantic_codecvt_helperIcEE[104];
.global .align 8 .b8 _ZTVN5boost15program_options16typed_value_baseE[40];
.global .align 8 .b8 _ZTVN5boost15program_options22abstract_variables_mapE[40];
.global .align 8 .b8 _ZTVN5boost15program_options13variables_mapE[40];
.global .align 8 .b8 _ZTVN5boost15program_options11typed_valueIicEE[152] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.global .align 8 .b8 _ZTVN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEEE[72] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.global .align 8 .b8 _ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEEE[168] = {64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 255, 255, 255, 255, 255, 255, 255, 192, 255, 255, 255, 255, 255, 255, 255, 192, 255, 255, 255, 255, 255, 255, 255, 192, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.global .align 8 .u64 _ZTTN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEEE[2] = {generic(_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEEE)+24, generic(_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEEE)+136};
.global .align 8 .b8 _ZTVN5boost3any6holderIiEE[48];
.global .align 8 .b8 _ZTVN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE[72] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.global .align 8 .b8 _ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE[168] = {48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 255, 255, 255, 255, 255, 255, 255, 208, 255, 255, 255, 255, 255, 255, 255, 208, 255, 255, 255, 255, 255, 255, 255, 208, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.global .align 8 .u64 _ZTTN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE[2] = {generic(_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE)+24, generic(_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE)+136};

.visible .entry _Z10kernel_rowPfS_ii(
	.param .u64 _Z10kernel_rowPfS_ii_param_0,
	.param .u64 _Z10kernel_rowPfS_ii_param_1,
	.param .u32 _Z10kernel_rowPfS_ii_param_2,
	.param .u32 _Z10kernel_rowPfS_ii_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd2, [_Z10kernel_rowPfS_ii_param_0];
	ld.param.u64 	%rd3, [_Z10kernel_rowPfS_ii_param_1];
	ld.param.u32 	%r4, [_Z10kernel_rowPfS_ii_param_2];
	ld.param.u32 	%r5, [_Z10kernel_rowPfS_ii_param_3];
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r4;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd1, %rd2;
	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	mov.u32 	%r11, 0;
	setp.lt.s32	%p2, %r5, 1;
	@%p2 bra 	BB0_3;

BB0_2:
	mad.lo.s32 	%r10, %r11, %r4, %r1;
	mul.wide.s32 	%rd7, %r10, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f1;
	add.s32 	%r11, %r11, 1;
	setp.lt.s32	%p3, %r11, %r5;
	@%p3 bra 	BB0_2;

BB0_3:
	ret;
}

	// .globl	_Z10kernel_colPfS_ii
.visible .entry _Z10kernel_colPfS_ii(
	.param .u64 _Z10kernel_colPfS_ii_param_0,
	.param .u64 _Z10kernel_colPfS_ii_param_1,
	.param .u32 _Z10kernel_colPfS_ii_param_2,
	.param .u32 _Z10kernel_colPfS_ii_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd7, [_Z10kernel_colPfS_ii_param_0];
	ld.param.u64 	%rd8, [_Z10kernel_colPfS_ii_param_1];
	ld.param.u32 	%r6, [_Z10kernel_colPfS_ii_param_2];
	ld.param.u32 	%r7, [_Z10kernel_colPfS_ii_param_3];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r8, %r1, %r2, %r3;
	setp.lt.s32	%p1, %r8, %r7;
	setp.gt.s32	%p2, %r6, 0;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB1_3;
	bra.uni 	BB1_1;

BB1_1:
	cvta.to.global.u64 	%rd9, %rd7;
	cvta.to.global.u64 	%rd12, %rd8;
	mul.lo.s32 	%r11, %r6, %r8;
	mul.wide.s32 	%rd10, %r11, 4;
	add.s64 	%rd11, %rd9, %rd10;
	mov.u32 	%r12, 0;

BB1_2:
	ld.global.f32 	%f1, [%rd12];
	st.global.f32 	[%rd11], %f1;
	add.s64 	%rd12, %rd12, 4;
	add.s64 	%rd11, %rd11, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p4, %r12, %r6;
	@%p4 bra 	BB1_2;

BB1_3:
	ret;
}

	// .globl	_Z14kernel_col_asmPfS_ii
.visible .entry _Z14kernel_col_asmPfS_ii(
	.param .u64 _Z14kernel_col_asmPfS_ii_param_0,
	.param .u64 _Z14kernel_col_asmPfS_ii_param_1,
	.param .u32 _Z14kernel_col_asmPfS_ii_param_2,
	.param .u32 _Z14kernel_col_asmPfS_ii_param_3
)
{
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z14kernel_col_asmPfS_ii_param_0];
	ld.param.u64 	%rd2, [_Z14kernel_col_asmPfS_ii_param_1];
	ld.param.u32 	%r1, [_Z14kernel_col_asmPfS_ii_param_2];
	ld.param.u32 	%r2, [_Z14kernel_col_asmPfS_ii_param_3];
	// inline asm
	{
	 	.reg .u32 %mr<5>;
	 	.reg .u64 %mrd<2>;
	 	.reg .pred %p;
	 	.reg .u64 %src_head;
	 	.reg .u64 %dst_head;
	 	.reg .u32 %loop;
	 	.reg .f32 %buffer;
	 
	 	mov.s32 %mr0, %ctaid.x;
	 	mov.s32 %mr1, %ntid.x;
	 	mov.s32 %mr2, %tid.x;
	 	mad.lo.s32 %mr3, %mr0, %mr1, %mr2;
	 	mul.lo.s32 %mr4, %mr3, %r1;
	 	mul.wide.s32 %mrd0, %mr4, 4;
	 	add.s64 %mrd0, %mrd0, %rd1;
	 
	 	mov.s64 %src_head, %rd2;
	 	mov.s64 %dst_head, %mrd0;
	 
	 	setp.ge.s32 %p, %mr3, %r2;
	 	@%p bra END;
	 
	 	sub.s32 %loop, %r1, 1;
	 LOOP:
	 	ld.global.f32 %buffer, [%src_head];
	 	st.global.f32 [%dst_head], %buffer;
	 	add.s64 %src_head, %src_head, 4;
	 	add.s64 %dst_head, %dst_head, 4;
	 	setp.eq.s32 %p, %loop, 0;
	 	@%p bra END;
	 	sub.s32 %loop,%loop,1;
	 	bra LOOP;
	 END:
	 
	}
	// inline asm
	ret;
}

	// .globl	_Z14kernel_row_asmPfS_ii
.visible .entry _Z14kernel_row_asmPfS_ii(
	.param .u64 _Z14kernel_row_asmPfS_ii_param_0,
	.param .u64 _Z14kernel_row_asmPfS_ii_param_1,
	.param .u32 _Z14kernel_row_asmPfS_ii_param_2,
	.param .u32 _Z14kernel_row_asmPfS_ii_param_3
)
{
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z14kernel_row_asmPfS_ii_param_0];
	ld.param.u64 	%rd2, [_Z14kernel_row_asmPfS_ii_param_1];
	ld.param.u32 	%r1, [_Z14kernel_row_asmPfS_ii_param_2];
	ld.param.u32 	%r2, [_Z14kernel_row_asmPfS_ii_param_3];
	// inline asm
	{
	 	.reg .u32 %mr<5>;
	 	.reg .u64 %mrd<2>;
	 	.reg .pred %p;
	 	.reg .u64 %src_head;
	 	.reg .u64 %dst_head;
	 	.reg .u32 %loop;
	 	.reg .f32 %buffer;
	 	.reg .u64 %interval;
	 
	 	mov.s32 %mr0, %ctaid.x;
	 	mov.s32 %mr1, %ntid.x;
	 	mov.s32 %mr2, %tid.x;
	 	mad.lo.s32 %mr3, %mr0, %mr1, %mr2;
	 	mul.wide.s32 %mrd0, %mr3, 4;
	 	mul.wide.s32 %interval, %r1, 4;
	 
	 	setp.ge.s32 %p, %mr3, %r1;
	 	@%p bra END;
	 
	 	add.s64 %src_head, %mrd0, %rd2;
	 	add.s64 %dst_head, %mrd0, %rd1;
	 
	 
	 	ld.global.f32 %buffer, [%src_head];
	 
	 	sub.s32 %loop, %r2, 1;
	 LOOP:
	 	st.global.f32 [%dst_head], %buffer;
	 	add.s64 %dst_head, %interval, %dst_head;
	 	setp.eq.s32 %p, %loop, 0;
	 	@%p bra END;
	 	sub.s32 %loop,%loop,1;
	 	bra LOOP;
	 END:
	 
	}
	// inline asm
	ret;
}


